#! /usr/bin/perl

# convers ascii astank output to html table

%bgcolor = (
		"UA" => "#CCFFFF",
		"RU" => "#FFFFCC"
	   );
$bgcolor = "#EEEEEE";

$astable="as-rank.caida.org.txt";

%ru = (
		 9002 => "Retn",
		 8492 => "OBIT",
		 3216 => "Golden Telecom",
		12389 => "Rostelecom",
		20485 => "TransTelecom",
		 3267 => "RUNNet",
		 6854 => "Synterra",
		 8342 => "RTComm",
		 8359 => "MTU Intell",
		 8732 => "Comcor",
		 8744 => "StartTelecom",
		 3277 => "RusNet",
		39792 => "Anders B.G.",
		 8402 => "Corbina",
		12695 => "Dinet",
		25478 => "IHome",
		 2854 => "Equant Moscow",
		28809 => "NaukaNet",
		21127 => "ZapSibTTK",
		29648 => "Comline",
		21414 => "RusComNet",
		20764 => "Rascom",
		29076 => "CityTelecom",
		16083 => "Stack",
		41440 => "SibirTelecom",
		44237 => "CTC Core",
		24739 => "Severen",
		30751 => "Eurotel",
		34726 => "Saltar Telecom",
		31133 => "Megafon",
		 8997 => "SpbNit",
		43975 => "VolgaTelecom",
		 2118 => "Relcom",
		 5568 => "RBNet",
		35400 => "MFIST (USI)",
		30960 => "Tetra",
		12772 => "Enforta",
		12714 => "NetByNet",
		28917 => "Fiord",
		 3058 => "RAS",
		35153 => "Relians",
		20632 => "PeterStar"
      );
%ua = (
		21219 => "Datagroup",
		 3255 => "Uarnet",
		13249 => "ITSystems",
		15772 => "WNet",
		35320 => "ETT",
		 6849 => "UkrTelecom",
		25229 => "Volia",
		12883 => "Ucomline",
		29632 => "NetAssist",
		21011 => "TopNet"
      );

#    1.  3356 L3               5138898 146101 18801  2431

# 4       6478,7018,23143 AT&T WorldNet Services  US      6,982,030       261,523 26,466  2,212
if (open(F, "<$astable")) {
	while (<F>) {
		next unless /^\d+\s+([0-9,_.]+)\s+(.*)\s+[0-9,]+\s+[0-9,]+\s+[0-9,]+\s+[0-9,]+\s*$/;
		($as, $nameloc) = ($1, $2);
		if ($nameloc =~ /^(.*\S)\s+([A-Z][A-Z])\s*$/ || $nameloc =~ /^(.*\S)\s*$/) {
			($name, $loc) = ($1, $2);
		} else {
			($name, $loc) = ($nameloc, '');
		}
		foreach $a (split(/,/, $as)) {
			$name{$a} = $name;
			$country{$a} = $loc;
		}
	}
	close(F);
}

foreach $as (keys %ru) {
	$country{$as} = "RU";
	$name{$as} = $ru{$as};
}
foreach $as (keys %ua) {
	$country{$as} = "UA";
	$name{$as} = $ua{$as};
}

while ($ARGV[0] =~ /^--/) {
	if ($ARGV[0] eq "--ru") {
		$onlyru = 1;
	}
	elsif ($ARGV[0] =~ /--title=(.*)/) {
		$html = $1;
		print "<html>\n<head><title>$html</title></head>\n<body><h2 align=center>$html</h2>\n";
	}
	elsif ($ARGV[0] eq "--group") {
		$groups = 1;
	}
	shift(@ARGV);
}

print '<table border="1"><tr bgcolor="#555555">';
if ($ARGV[1]) {
	headtd('Rank', 'Diff', 'AS number', 'AS name', 'Country', '/24 / self-/24', 'Pfxs/Self-Pfxs', 'AS', 'Degree/Upstreams/Peering', 'Updates/Withdr/WithdrRate');
} else {
	headtd('Rank',         'AS number', 'AS name', 'Country', '/24 / self-/24', 'Pfxs/Self-Pfxs', 'AS', 'Degree/Upstreams/Peering', 'Updates/Withdr/WithdrRate');
}
print "</tr>\n";

if ($ARGV[1]) {
	$oldfile = $ARGV[0];
	shift(@ARGV);
	open(F, "<$oldfile") || die "Cannot open $oldfile: $!\n";
	while (<F>) {
		next unless /^\s*(?:\d+\.\s*)?([0-9.,]+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)(\s+\d+\s+\d+)?\s*$/;
		($asn, $n24, $npref, $nas, $degree) = ($1, $2, $3, $4, $5);
		if ($asn =~ /,/) {
			next unless $groups;
			foreach $a (split(/,/, $asn)) {
				$ingroup{$a} = $asn;
			}
			$asn = "$`," if $asn =~ /,/;
		}
		$n24{$asn} = $n24;
		$npref{$asn} = $npref;
		$nas{$asn} = $nas;
		$degree{$asn} = $degree;
	}
	close(F);
	$i=0;
	foreach (sort { $n24{$b} <=> $n24{$a} || $npref{$b} <=> $npref{$a} || $nas{$b} <=> $nas{$a} || $degree{$b} <=> $degree{$a} } keys %n24) {
		next if $ingroup{$_};
		if ($onlyru) {
			next unless $country{$_} =~ /^(RU|UA)$/;
		}
		$oldrank{$_} = ++$i;
	}
	%n24 = %npref = %nas = %degree = %ingroup = ();
}

while (<>) {
	#next unless /^\s*([0-9.,]+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)(\s+\d+\s+\d+)?\s*$/;
	if (/Uplinks for ([0-9.]+): ([0-9.,]+)\s*/) {
		if ($ingroup{$1}) {
			$asn = $ingroup{$1};
			$ups = $2;
			foreach $up (split(/,/, $ups)) {
				$upgroup{$asn}->{$up} = 1;
			}
		} else {
			$uplink{$1} = $2;
		}
		next;
	}
	next unless m@^\s*([0-9.,]+)\s+(\d+)/(\d+)\s+(\d+)/(\d+)\s+(\d+)\s+(\d+)/(\d+)/(\d+)\s+(\d+)/(\d+)\s*$@;
	($asn, $n24, $own24, $npref, $ownpref, $nas, $degree, $ups, $peer, $updates, $withdr) = ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11);
	if ($asn =~ /,/) {
		next unless $groups;
		foreach $a (split(/,/, $asn)) {
			$ingroup{$a}++;
		}
	}
	($n24{$asn}, $own24{$asn}, $npref{$asn}, $ownpref{$asn}, $nas{$asn}, $degree{$asn}, $ups{$asn}, $peer{$asn}, $updates{$asn}, $withdr{$asn}) = ($n24, $own24, $npref, $ownpref, $nas, $degree, $ups, $peer, $updates, $withdr);
}
foreach $asn (keys %upgroup) {
	$uplink{$asn} = join(',', (sort keys %{$upgroup{$asn}}));
	delete($upgroup{$asn});
}
$i=0;
$rank=0;
foreach $asn (sort { $n24{$b} <=> $n24{$a} || $npref{$b} <=> $npref{$a} || $nas{$b} <=> $nas{$a} || $degree{$b} <=> $degree{$a} } keys %n24) {
	next if $ingroup{$asn};
	last if ++$rank > 1000;
	$asgr =  $asn;
	$asn = $` if $asn =~ /,/;
	if ($onlyru) {
		next unless $country{$asn} =~ /^(RU|UA)$/;
	}
	$i++;
	$name = $name{$asn};
	$name =~ s/&/&amp;/g;
	$name =~ s/\s/&nbsp;/g;
	$name =~ s/</&lt;/g;
	$name =~ s/>/&gt;/g;
	($n24, $own24, $npref, $ownpref, $nas, $degree, $ups, $peer, $updates, $withdr) = ($n24{$asgr}, $own24{$asgr}, $npref{$asgr}, $ownpref{$asgr}, $nas{$asgr}, $degree{$asgr}, $ups{$asgr}, $peer{$asgr}, $updates{$asgr}, $withdr{$asgr});
	$n24 = bignumber($n24);
	$own24 = bignumber($own24);
	$npref = bignumber($npref);
	$ownpref = bignumber($ownpref);
	$nas = bignumber($nas);
	$updates = bignumber($updates);
	$withdr = bignumber($withdr);
	$nas = "$1&nbsp;$2" if $nas =~ /(\d+\d)(\d\d\d)$/;
	printf('<tr bgcolor=%s><td align=right>&nbsp;%d&nbsp;</td>', $bgcolor{$country{$asn}} ? $bgcolor{$country{$asn}} : $bgcolor, $rank);
	if (%oldrank) {
		print "<td align=right><pre>&nbsp;";
		$oldrank = ($oldrank{$asn} || $oldrank{"$asn,"});
		if (!$oldrank) {
			print "<font color=#00A000>New</font>";
		} elsif ($oldrank == $i) {
			print "<font color=#D0B000>0&#x25C0;</font>";			# &#x21A4;	&#x25C0; or &#x25C4;	&larr;
		} elsif ($oldrank > $i) {
			printf('<font color=#FF0000>+%d&#x25B2;</font>', $oldrank-$i);	# &#x21A5;	&#x25B2;	&uarr;
		} else {
			printf('<font color=#0000FF>-%d&#x25BC;</font>', $i-$oldrank);	# &#x21A7;	&#x25BC;	&darr;
		}
		print "&nbsp;</pre></td>";
	}
	$pasn = $asgr;
	if ($asgr =~ /,/) {
		$pasn = "<a title='$asgr'>$asn&nbsp;and&nbsp;group</a>";
	}
	printf('<td align=right>&nbsp;%s&nbsp;</td><td>&nbsp;%s&nbsp;</td>', $pasn, $name);
	printf('<td align=center>&nbsp;%s&nbsp;</td><td align=right>&nbsp;%s/%s&nbsp;</td>', $country{$asn}, $n24, $own24);
	printf('<td align=right>&nbsp;%s/%s&nbsp;</td><td align=right>&nbsp;%d&nbsp;</td>', $npref, $ownpref, $nas);
	printf('<td align=center>&nbsp;%d/', $degree);
	if ($ups && $uplink{$asgr}) {
		printf('<a title=\'%s\'>%d</a>', $uplink{$asgr}, $ups);
	} else {
		printf('%d', $ups);
	}
	printf('/%d&nbsp;</td>', $peer);
	printf('<td align=center>&nbsp;%s/%s/%.3f&nbsp;</td></tr>%s', $updates, $withdr,
	       $npref{$asgr} ? $withdr{$asgr}/$npref{$asgr}/5 : 0, "\n");
}
print "</table>\n";
print "</body>\n</html>\n" if $html;
print "\n";

sub chspace
{
	$_[0] =~ s/\s/&nbsp;/g;
	return $_[0];
}

sub headtd
{
	print '<td align="center"><font color="#FFFFFF">&nbsp;' . chspace("$_") . '&nbsp;</font></td>' foreach @_;
}

sub bignumber {
	my($num) = @_;

	$num = "$1&nbsp;$2" if $num =~ /(\d+)(\d\d\d\d\d\d)$/;
	$num = "$`$1&nbsp;$2" if $num =~ /(\d\d)(\d\d\d)$/;
	return $num;
}

